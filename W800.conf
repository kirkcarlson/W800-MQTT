[ports]

# portID is the identifier of the USB to serial adapter used to interface the W800. This is necessary because the
# USB port used may move around. Find the port identifier with the command `ls -la /dev/serial/by-id` after plugging
# in the serial adapter. If this is not supplied, it will be assumed that only one USB device is plugged in and 
# /dev/ttyUSB0 will be used
portID  =  usb-FTDI_FT232R_USB_UART_AK003VY3-if00-port0


[Logging]

# The currentLevel is set to one of the following:
#  "DEBUG"--    all debug messages
#  "DEBUG 3--   dump of raw message bytes
#  "DEBUG 2"--  dump of flipped message bytes
#  "DEBUG 1"--  decode of all messages received
#
#  "INFO"--     decode of minimized messages and other information
#  "WARNING"--  detection of transient, fixable errors and possible interference
#  "ERROR"--    detection of hard  error condition
loggingLevel = DEBUG

# logFile specifies the path for the log file. If this is not supplied, the log is written to the standard output
#THIS IS NOT IMPLEMENTED
#logFile = /var/log/W800log
#logFile = ~/log/W800log


[MQTT]

#MQTT_QOS is the quality of service to be used in transmitting the MQTT messages to the MQTT message broker
# 0 send at most once
# 1 send at least once
# 2 send exactly once

# 0, At most once: The message is delivered at most once, or it may not be delivered at all. Its delivery
# across the network is not acknowledged. The message is not stored. The message could be lost if the client
# is disconnected, or if the server fails. QoS0 is the fastest mode of transfer. It is sometimes called
# "fire and forget".

# The MQTT protocol does not require servers to forward publications at QoS0 to a client. If the client is
# disconnected at the time the server receives the publication, the publication might be discarded, depending
# on the server implementation.

# 1, At least once: The message is always delivered at least once. It might be delivered multiple times
# if there is a failure before an acknowledgment is received by the sender. The message must be stored
# locally at the sender, until the sender receives confirmation that the message has been published by
# the receiver. The message is stored in case the message must be sent again.

# 2, Exactly once: The message is always delivered exactly once. The message must be stored locally
# at the sender, until the sender receives confirmation that the message has been published by the receiver.
# The message is stored in case the message must be sent again. QoS2 is the safest, but slowest mode of
# transfer. A more sophisticated handshaking and acknowledgement sequence is used than for QoS1 to ensure
# no duplication of messages occurs.
# ...OK look this up and don't just guess
MQTT_QOS = 0

#MQTTbrokerHost is the url to the host of the MQTT broker where the MQTT messages are sent
# if this is not set, not MQTT messages will be sent to a broker on the localhost
MQTT_brokerHost: BC.local

# the topic is used at the top level for MQTT. It should begin and end with a slash. no quotes
# MQTTtopic: 'wirelessX10/'
MQTT_topic: W800/

# MQTT_mapping maps the X10 units to a MQTT subtopic
# Other X10 units are logged as WARNINGs.
# the mapping is a list of unit (house code + unit code) and name pairs
# each mapping pair is on a separate line
# house code letter, unit number [white space] MQTT subtopic
# DS10A units are specified as 'DS' followed by the unit number 0-127?
# if no MQTT subtopic, the house code and unit number are used, let the MQTT subscriber do
# the mapping, but send only approved codes
# spaces in subtopic are converted to underscores
# special case for DIM or BRIGHT codes that have no house code or unit number
# These can still be aliased if desired
#  e.g.
#MQTT_mapping = [
#   C1 Man_cave_motion
#   C2 Man_cave_dark
#   A1
#   A6 Something else again # with a comment
#   A7 Something else
#   A8
#   DIM
#   BRIGHT
#]
#
# to allow all decoded X10 messages to be send, use an empty mapping (default)
MQTT_mapping = []
#MQTT_mapping = [
#  A1
#  A7
#  A8
#  C1
#  C2
#  ]
